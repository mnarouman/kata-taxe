taxes
=====

Story: Calcul de taxes
======================

Enoncé
------

Une taxe sur la valeur ajoutée de 10% est appliquée sur chaque produit, à l'exception des livres, de
la nourriture et des médicaments, qui en sont exemptés. Une taxe additionnelle de 5% sur les
produits importés, sans exception.

Le montant de chacune des taxes est arrondi aux 5 cents supérieurs, selon la règle suivante :

| Taxe calculée | Taxe imputée |
|---------------|--------------|
|          0.99 |         1.00 |
|          1.00 |         1.00 |
|          1.01 |         1.05 |
|          1.02 |         1.05 |

Lorsque l'on passe une commande, une facture est émise listant chacun des produits ainsi que leur
prix TTC ; au bas de la facture figurent le montant total (TTC) ainsi que le montant total des taxes.
Le montant TTC est calculé comme suit :
Pttc = Pht + somme(arrondi(Pht*t/100))
Pttc: Prix TTC
Pht : Prix hors taxes
t : taxe applicable

Ecrire une application, exécutable sur une JVM 1.8, qui imprime la facture détaillée pour chacun des
paniers suivants :

 
### INPUT

#### Input 1

* 1 livre à 12.49
* 1 CD musical à 14.99
* 1 barre de chocolat à 0.85

#### Input 2

* 1 boîte de chocolats importée à 10.00
* 1 flacon de parfum importé à 47.50

#### Input 3

* 1 flacon de parfum importé à 27.99
* 1 flacon de parfum à 18.99
* 1 boîte de pilules contre la migraine à 9.75
* 1 boîte de chocolats importés à 11.25

### OUTPUT

#### Output 1

1 livre : 12.49
1 CD musical : 16.49
1 barre de chocolat : 0.85
Montant des taxes : 1.50
Total : 29.83

#### Output 2

1 boîte de chocolats importée : 10.50
1 flacon de parfum importé : 54.65
Montant des taxes : 7.65
Total : 65.15

#### Output 3

1 flacon de parfum importé : 32.19
1 flacon de parfum : 20.89
1 boîte de pilules contre la migraine : 9.75
1 boîte de chocolats importés : 11.85
Montant des taxes : 6.70
Total : 74.68

Le projet est une implémentation possible et contient l'historique GIT suivant:
* 6bc9687 - Refactoring avec Lombok
* a762c9c - Le test du cas 3 passe directement ! Finit
* bb4946e - Refactoring Ok
* fb09cb6 - Le test pour les produits importés passe
* 6c12205 - Le test pour la taxe des produits importés plante...
* d8c7e95 - On a refactoré les classes...
* e98ccde - Le test pour les produits exemptés passe !
* c629fdb - Le test pour les produits exemptés plante : normal
* 0f6c458 - Le test de la boucle externe passe !
* 34ed15e - La boucle interne passe, mais pas l'externe...
* b2ac8cb - On implémente un test simple pour la taxation d'un produit...
* 05d07ed - On implémente le test qui plante.
* 5b26c3a - L'algo des arrondi est testé !
* 52599bc - Le test pour le 3eme cas passe !
* 8c89da8 - Le 3eme cas ne passe passe : normal
* 179d065 - Le test pour le 1er cas d'arrondi passe.
* 460032a - Le test pour le 1er cas d'arrondi plante : normal
* 378f149 - Après le refactoring, le code compile : ok
* 25fc5d4 - Le test passe pour 2 produits. On refactore...
* 77da83a - La méthode pour 2 articles plante : normal !
* 2e933c2 - Le test pour un produt passe
* 3a8d5fb - Le test plante, On crée le produit...
* f378d94 - Le formatage des nombres est ok. Gérons un produit
* 4ca797d - Le formatage est ok -> refactoring
* d55121f - La méthode pour formater 1 plante : normal !
* 1a0657e - Passage du 1er test pour le formatage
* e7d56ad - Initialisation du formatage des nombres
* b0e88fa - création du ServiceReport et de sa méthode report
* 6862d7b - Création d'une classe de test pour les rapport
* a0a49f0 - Initialisation du projet

Vous pouvez vous positionner sur chaque commit via git reset --hard <NUM_COMMIT>